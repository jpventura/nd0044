# Emacs
*~
.*~
.\#*
\#*

# Node.js

## Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*

## Dependency directories
node_modules/
jspm_packages/

## Optional npm cache directory
.npm

## Optional eslint cache
.eslintcache

## Optional REPL history
.node_repl_history

## Yarn Integrity file
.yarn-integrity

## dotenv environment variables file
.env
.env.test

## yarn v2
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.pnp.*

# Python

## Byte-compiled / optimized / DLL files
*$py.class
*.py[cod]
__pycache__/

## C extensions
*.so

## Distribution / packaging
*.egg
*.egg-info/
.Python
.eggs/
.installed.cfg
MANIFEST
build/
develop-eggs/
dist/
downloads/
eggs/
lib/
lib64/
parts/
sdist/
share/python-wheels/
var/
wheels/

## PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

## Installer logs
pip-delete-this-directory.txt
pip-log.txt

## Unit test / coverage reports
*.cover
*.py,cover
.cache
.coverage
.coverage.*
.hypothesis/
.nox/
.pytest_cache/
.tox/
cover/
coverage.xml
htmlcov/
nosetests.xml

## Translations
*.mo
*.pot

## Django stuff:
*.log
db.sqlite3
db.sqlite3-journal
local_settings.py

## Flask stuff:
.webassets-cache
instance/

## Scrapy stuff:
.scrapy

## Sphinx documentation
docs/_build/

## PyBuilder
.pybuilder/
target/

## Jupyter Notebook
.ipynb_checkpoints

## IPython
ipython_config.py
profile_default/

## pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

## pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

## PEP 582; used by e.g. github.com/David-OConnor/pyflow
__pypackages__/

## Celery stuff
celerybeat-schedule
celerybeat.pid

## SageMath parsed files
*.sage.py

## Environments
.env
.venv
ENV/
env.bak/
env/
venv.bak/
venv/

## Spyder project settings
.spyderproject
.spyproject

## Rope project settings
.ropeproject

## mkdocs documentation
/site

## mypy
.dmypy.json
.mypy_cache/
dmypy.json

## Pyre type checker
.pyre/

## pytype static type analyzer
.pytype/

## Cython debug symbols
cython_debug/

# Sublime

## Cache files for Sublime Text
*.tmlanguage.cache
*.tmPreferences.cache
*.stTheme.cache

## Workspace files are user-specific
*.sublime-workspace

## Project files should be checked into the repository, unless a significant
## proportion of contributors will probably not be using Sublime Text
## *.sublime-project

## SFTP configuration file
sftp-config.json
sftp-config-alt*.json

## Package control specific files
Package Control.last-run
Package Control.ca-list
Package Control.ca-bundle
Package Control.system-ca-bundle
Package Control.cache/
Package Control.ca-certs/
Package Control.merged-ca-bundle
Package Control.user-ca-bundle
oscrypto-ca-bundle.crt
bh_unicode_properties.cache

## Sublime-github package stores a github token in this file
## https://packagecontrol.io/packages/sublime-github
GitHub.sublime-settings

# TextMate
*.tmproj
*.tmproject
tmtags

# VSCode
!.vscode/extensions.json
!.vscode/launch.json
!.vscode/settings.json
!.vscode/tasks.json
*.code-workspace
.vscode/*

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# Vim

## Swap
[._]*.s[a-v][a-z]
!*.svg  # comment out if you don't need vector files
[._]*.sw[a-p]
[._]s[a-rt-v][a-z]
[._]ss[a-gi-z]
[._]sw[a-p]

## Session
Session.vim
Sessionx.vim

## Temporary
.netrwhist

## Auto-generated tag files
tags

## Persistent undo
[._]*.un~
